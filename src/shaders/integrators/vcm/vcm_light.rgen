#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "vcm_commons.h"
#include "../../commons.glsl"

layout(push_constant) uniform _PushConstantRay { PCVCM pc_ray; };
// VCM buffers
layout(buffer_reference, scalar) buffer PhotonData_ { VCMPhotonHash d[]; };
layout(buffer_reference, scalar) buffer VCMVertex_ { VCMVertex d[]; };
layout(buffer_reference, scalar) buffer LightPathCnt { uint d[]; };
layout(buffer_reference, scalar) buffer ColorStorages { vec3 d[]; };

layout(buffer_reference, scalar) buffer VCMReservoir_ { VCMReservoir d[]; };

layout(buffer_reference, scalar) buffer SelectedReservoirs_ {
    SelectedReservoirs d[];
};

layout(buffer_reference, scalar) buffer LightSamples { VCMRestirData d[]; };
layout(buffer_reference, scalar) buffer ShouldResample { uint d; };
layout(buffer_reference, scalar) buffer LightStates { LightState d[]; };
layout(buffer_reference, scalar) buffer Angles { AngleStruct d[]; };

layout(constant_id = 0) const int RAY_GUIDE = 0;

PhotonData_ photons = PhotonData_(scene_desc.photon_addr);
VCMVertex_ vcm_lights = VCMVertex_(scene_desc.vcm_vertices_addr);
LightPathCnt light_path_cnts = LightPathCnt(scene_desc.path_cnt_addr);
ColorStorages tmp_col = ColorStorages(scene_desc.color_storage_addr);
LightSamples light_samples = LightSamples(scene_desc.light_samples_addr);
ShouldResample should_resample =
    ShouldResample(scene_desc.should_resample_addr);
LightStates light_states = LightStates(scene_desc.light_state_addr);
Angles angles = Angles(scene_desc.angle_struct_addr);

VCMReservoir_ temporal_reservoirs =
    VCMReservoir_(scene_desc.vcm_reservoir_addr);
SelectedReservoirs_ selected_reservoirs =
    SelectedReservoirs_(scene_desc.selected_reservoirs_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc_ray.total_frame_num ^ pc_ray.random_num);
uint vcm_light_path_idx =
    (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y) *
    (pc_ray.max_depth + 1);
#include "../vcm_commons.glsl"
const uint FRAME_INTERVAL = 10;

uint restir_hash(ivec3 p, uint size) {
    return uint((p.x * 73856093) ^ (p.y * 19349663) ^ p.z * 83492791) % size;
}

uint get_restir_hash_idx(uint light_idx, float u, float v) {
    const int base_res =
        int(sqrt(float(screen_size) / pc_ray.light_triangle_count));
    ivec3 grid_res = ivec3(pc_ray.light_triangle_count, base_res, base_res);
    ivec3 grid_idx =
        get_grid_idx(vec3(light_idx, u, v), vec3(0, 0, 0),
                     vec3(pc_ray.light_triangle_count, 1, 1), grid_res);

    return restir_hash(grid_idx, screen_size);
}

void load_vcm_state(float eta_vc, const VCMReservoir r,
                    const LightState light_state, out VCMState state,
                    bool use_reservoir) {
    float pdf_pos = light_state.triangle_pdf / pc_ray.light_triangle_count;
    vec3 wi;
    float W;
    float cos_theta;
    if (use_reservoir && r.W > 0) {
        wi = r.s.dir;
        cos_theta = abs(dot(wi, light_state.normal));

        // float cos_deg = degrees(acos(cos_theta));
        // if(true) {
        // //if(light_state.hash_idx == 1231707) {
        //     angles.d[pixel_idx % pc_ray.max_angle_samples].is_active = 1;
        //     angles.d[pixel_idx % pc_ray.max_angle_samples].theta =
        //     acos(cos_theta); angles.d[pixel_idx %
        //     pc_ray.max_angle_samples].phi = r.s.phi;
        // }
        W = r.W;
    } else {
        wi = light_state.dir;
        const float pdf_dir =
            light_pdf_Le(light_state.light_flags, light_state.normal, wi);
        cos_theta = abs(dot(wi, light_state.normal));
        W = 1. / pdf_dir;
    }
    state.pos = light_state.pos;
    state.n_s = light_state.normal;
    state.area = 1.0 / light_state.triangle_pdf;
    state.wi = wi;
    state.throughput = light_state.Le * cos_theta * W / (pdf_pos);
    state.d_vcm = W;
    if (!is_light_delta(light_state.light_flags)) {
        const float cos_factor =
            is_light_finite(light_state.light_flags) ? cos_theta : 1;
        state.d_vc = cos_factor * W / (pdf_pos);
    } else {
        state.d_vc = 0;
    }
    state.d_vm = state.d_vc * eta_vc;
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));
    vec4 area_int = (ubo.inv_projection * vec4(2. / gl_LaunchSizeEXT.x,
                                               2. / gl_LaunchSizeEXT.y, 0, 1));
    area_int /= (area_int.w);
    const float cam_area = abs(area_int.x * area_int.y);
    VCMState vcm_state;

#define light_vtx(i) vcm_lights.d[vcm_light_path_idx + i]
    const float radius = pc_ray.radius;
    const float radius_sqr = radius * radius;
    float eta_vcm = PI * radius_sqr * screen_size;
    float eta_vc = (pc_ray.use_vc == 1) ? 1.0 / eta_vcm : 0;
    float eta_vm = (pc_ray.use_vm == 1) ? PI * radius_sqr * screen_size : 0;
    bool specular = false;
    bool result;
    bool finite;
    if (RAY_GUIDE == 1) {
        const LightState light_state = light_states.d[pixel_idx];
        VCMReservoir r;
        bool use_reservoir = false;
        if (should_resample.d == 0) {
            use_reservoir =
                (pixel_idx ==
                 temporal_reservoirs.d[light_state.hash_idx].selected_idx);
        }
        if (use_reservoir) {
            r = temporal_reservoirs.d[light_state.hash_idx];
        }
        load_vcm_state(eta_vc, r, light_state, vcm_state, use_reservoir);
        vec3 initial = vcm_state.throughput;
        finite = is_light_finite(light_state.light_flags);
    } else {
        if (!vcm_generate_light_sample(eta_vc, vcm_state, finite)) {
            return;
        }
    }
    vcm_fill_light(origin.xyz, vcm_state, finite, eta_vcm, eta_vc, eta_vm);
#undef light_vtx
}