#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "vcm_commons.h"
#include "../../utils.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PCVCM pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer LightSamples { VCMRestirData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer VCMReservoir_ { VCMReservoir d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ShouldResample { uint d; };

uint size = pc.size_x * pc.size_y;

LightSamples light_samples = LightSamples(scene_desc.light_samples_addr);
ShouldResample should_resample =
    ShouldResample(scene_desc.should_resample_addr);
VCMReservoir_ temporal_reservoirs =
    VCMReservoir_(scene_desc.vcm_reservoir_addr);

void main() {
    if(gl_GlobalInvocationID.x >= size) {
        return;
    }
    if(temporal_reservoirs.d[gl_GlobalInvocationID.x].factor > 0) {
        should_resample.d = 1;
    }
}