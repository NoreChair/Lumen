#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "sppm_commons.h"
#include "../../commons.glsl"
layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;

layout(push_constant) uniform _PushConstantRay { PCSPPM pc; };
// SPPM buffers
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer AtomicData_ { AtomicData d; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer PhotonData_ { PhotonHash d[]; };

AtomicData_ atomic_data = AtomicData_(scene_desc.atomic_data_addr);
PhotonData_ photons = PhotonData_(scene_desc.photon_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;

const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc.frame_num ^ pc.random_num);

vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

void main() {
    LightRecord light_record;
    vec3 wi, pos, n;
    float pdf_pos, pdf_dir;
    float cos_theta;

    vec4 rands_pos = rand4(seed);
    vec2 rands_dir = rand2(seed);

    const vec3 Le =
        sample_light_Le(rands_pos, rands_dir, pc.num_lights, pc.light_triangle_count,
                        cos_theta, light_record, pos, wi, n, pdf_pos, pdf_dir);
 
    float abs_cos_light = abs(dot(n, wi));
    vec3 throughput;
    if (abs_cos_light == 0 || pdf_dir <= 0) {
        throughput = vec3(0);
    } else {
        throughput = Le * abs_cos_light / (pdf_dir * pdf_pos);
    }

    for (int d = 0; d < pc.max_depth; d++) {
        traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, pos, tmin, wi, tmax, 0);
        bool found_isect = payload.material_idx != -1;
        if (!found_isect) {
            break;
        }
        const vec3 wo = -wi;
        vec3 n_s = payload.n_s;
        bool side = true;
        vec3 n_g = payload.n_g;
        if (dot(payload.n_g, wo) < 0.)
            n_g = -n_g;
        if (dot(n_g, payload.n_s) < 0) {
            n_s = -n_s;
            side = false;
        }
        float cos_wo = dot(wo, n_s);
        Material hit_mat = load_material(payload.material_idx, payload.uv);
        if (d > 0) {
            // Ignore the first bounce
            vec3 min_bnds = atomic_data.d.min_bnds;
            vec3 max_bnds = atomic_data.d.max_bnds;
            ivec3 grid_res = atomic_data.d.grid_res;
            const ivec3 grid_idx =
                get_grid_idx(payload.pos, min_bnds, max_bnds, grid_res);
            const uint h = hash(grid_idx, screen_size);
            photons.d[h].pos = payload.pos;
            photons.d[h].wi = -wi;
            photons.d[h].throughput = throughput;
            photons.d[h].nrm = n_s;
            photons.d[h].path_len = d + 1;
            atomicAdd(photons.d[h].photon_count, 1);
        }
        pos = offset_ray(payload.pos, n_g);
        float pdf_dir, cos_theta;
        const vec3 f = sample_bsdf(n_s, wo, hit_mat, 0, side, wi, pdf_dir,
                                   cos_theta, seed);
        throughput *= f * abs(cos_theta) / pdf_dir;

        if (f == vec3(0) || pdf_dir == 0) {
            break;
        }
        if (d > RR_MIN_DEPTH) {
            float rr_prob = min(0.95f, luminance(throughput));
            if (rr_prob < rand(seed))
                break;
            else
                throughput /= rr_prob;
        }
    }
}