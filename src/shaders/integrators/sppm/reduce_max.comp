#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "sppm_commons.h"
#include "../../utils.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PCSPPM pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer AtomicData_ { AtomicData d; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ResidualData { vec4 d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer CounterData { int d; };
uint size = pc.size_x * pc.size_y;
ResidualData res_data = ResidualData(scene_desc.residual_addr);
CounterData cnt = CounterData(scene_desc.counter_addr);
AtomicData_ atomic_data = AtomicData_(scene_desc.atomic_data_addr);
shared vec4 data[32];
void main() {
    uint idx = gl_GlobalInvocationID.x;
    vec3 val;
    float radius_val = 0;
    uint limit = cnt.d == 0 ? size : ((size + 1023) >> (10 * cnt.d));
    if (idx >= limit) {
        return;
    }
    val = res_data.d[idx].xyz;
    radius_val = res_data.d[idx].w;
    memoryBarrier();
    barrier();

    val = subgroupMax(val);
    radius_val = subgroupMax(radius_val);
    if (gl_SubgroupInvocationID == 0) {
        data[gl_SubgroupID].xyz = val;
        data[gl_SubgroupID].w = radius_val;
    }
    barrier();

    if (gl_SubgroupID == 0) {
        val = data[gl_SubgroupInvocationID].xyz;
        radius_val = data[gl_SubgroupInvocationID].w;
        subgroupBarrier();
        val = subgroupMax(val);
        radius_val = subgroupMax(radius_val);
    }
    if (gl_LocalInvocationID.x == 0) {
        res_data.d[gl_WorkGroupID.x].xyz = val;
        res_data.d[gl_WorkGroupID.x].w = radius_val;
    }
    if (idx == 0) {
        cnt.d += 1;
        atomic_data.d.max_bnds = val;
        atomic_data.d.max_radius = radius_val;
    }
}