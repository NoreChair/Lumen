#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "../../utils.glsl"
#include "sppm_commons.h"
layout(binding = 0, rgba32f) uniform image2D image;
layout(binding = 1) buffer SceneDesc_ { SceneDesc scene_desc; };

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(push_constant) uniform _PushConstantRay { PCSPPM pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer SPPMData_ { SPPMData d[]; };
uint size = pc.size_x * pc.size_y;
SPPMData_ sppm_data = SPPMData_(scene_desc.sppm_data_addr);
uint screen_size = pc.size_x * pc.size_y;
vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= size) {
        return;
    }
    ivec2 coords = ivec2(gl_GlobalInvocationID.x / pc.size_y,
                         gl_GlobalInvocationID.x % pc.size_y);
#define pixel(idx) sppm_data.d[idx]
    vec3 col = pixel(idx).col;
    if (pixel(idx).M > 0 ) {
        const float gamma = 2.0 / 3.0;
        float n_new = pixel(idx).N + gamma * pixel(idx).M;
        float r_new =
            pixel(idx).radius * sqrt(n_new / (pixel(idx).N + pixel(idx).M));
        pixel(idx).tau = (pixel(idx).tau + pixel(idx).phi) * r_new * r_new /
                         (pixel(idx).radius * pixel(idx).radius);
        pixel(idx).N = n_new;
        pixel(idx).radius = r_new;
        pixel(idx).M = 0;
        pixel(idx).phi = vec3(0);
        col += pixel(idx).tau / (size * PI * r_new * r_new);
    }
    pixel(idx).col = vec3(0);
    pixel(idx).tau = vec3(0);
    if (pc.frame_num > 0) {
        float w = 1. / float(pc.frame_num + 1);
        vec3 old_col = imageLoad(image, coords).xyz;
        imageStore(image, coords, vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, coords, vec4(col, 1.f));
    }
}