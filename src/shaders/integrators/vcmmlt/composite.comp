#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "vcmmlt_commons.h"
#include "../../utils.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(buffer_reference, scalar) buffer ColorStorages { vec3 d[]; };
layout(buffer_reference, scalar) buffer MLTColor { vec3 d[]; };
layout(binding = 0, rgba32f) uniform image2D image;
layout(binding = 1) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(buffer_reference, scalar) buffer ChainStats { ChainData d[]; };
layout(push_constant) uniform _PushConstantRay { PCMLT pc_ray; };
layout(buffer_reference, scalar) buffer CDFSum { float d; };
ChainStats chain_stats = ChainStats(scene_desc.chain_stats_addr);
ColorStorages tmp_col = ColorStorages(scene_desc.color_storage_addr);
MLTColor mlt_col = MLTColor(scene_desc.mlt_col_addr);
CDFSum cdf_sum = CDFSum(scene_desc.cdf_sum_addr);
void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.x / pc_ray.size_y,
                         gl_GlobalInvocationID.x % pc_ray.size_y);
    vec3 col = vec3(0);
    float mut_factor = pc_ray.size_x * pc_ray.size_y / pc_ray.num_mlt_threads;
    float mult_factor =  1. / (2 * mut_factor * 2);
    for (int i = 0; i < 2; i++) {
        float factor =
            chain_stats.d[i].normalization /
            (pc_ray.mutations_per_pixel);
        col +=  mlt_col.d[gl_GlobalInvocationID.x] * factor;
        // col += mlt_col.d[gl_GlobalInvocationID.x] * cdf_sum.d /
        //        (pc_ray.mutations_per_pixel);
        // col += 0.5 * mlt_col.d[gl_GlobalInvocationID.x] *
        //        chain_stats.d[i].normalization * pc_ray.size_x * pc_ray.size_y /
        //        (chain_stats.d[i].total_samples);
    }
    col += tmp_col.d[gl_GlobalInvocationID.x];
    mlt_col.d[gl_GlobalInvocationID.x] = vec3(0);
    tmp_col.d[gl_GlobalInvocationID.x] = vec3(0);
    if (pc_ray.frame_num > 0) {
        float w = 1. / float(pc_ray.frame_num + 1);

        vec3 old_col = imageLoad(image, ivec2(coords)).xyz;
        imageStore(image, ivec2(coords), vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, ivec2(coords), vec4(col, 1.f));
    }
}