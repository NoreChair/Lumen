#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable

#include "vcmmlt_commons.h"
#include "../../utils.glsl"

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(push_constant) uniform _PushConstantRay { PCMLT pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ResidualData { SumData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ChainStats { ChainData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer CounterData { int d; };
layout(constant_id = 0) const int MODE = 0;
uint size = pc.num_mlt_threads;
ResidualData res_data = ResidualData(scene_desc.residual_addr);
CounterData cnt = CounterData(scene_desc.counter_addr);
ChainStats chain_stats = ChainStats(scene_desc.chain_stats_addr);
shared vec2 dataf[32];
shared uint datau[32];
void main() {
    uint idx = gl_GlobalInvocationID.x;
    vec2 valf;
    uint valu;
    uint limit = cnt.d == 0 ? size : ((size + 1023) >> (10 * cnt.d));
    if (idx >= limit) {
        dataf[gl_SubgroupInvocationID] = vec2(0);
        datau[gl_SubgroupInvocationID] = 0;
        return;
    }
    valf = vec2(res_data.d[idx].x, res_data.d[idx].z);
    valu = res_data.d[idx].y;
    memoryBarrier();
    barrier();

    valf = subgroupAdd(valf);
    valu = subgroupAdd(valu);
    if (gl_SubgroupInvocationID == 0) {
        dataf[gl_SubgroupID] = valf;
        datau[gl_SubgroupID] = valu;
    }
    barrier();

    if (gl_SubgroupID == 0) {
        valf = dataf[gl_SubgroupInvocationID];
        valu = datau[gl_SubgroupInvocationID];
        subgroupBarrier();
        valf = subgroupAdd(valf);
        valu = subgroupAdd(valu);
    }
    if (gl_LocalInvocationID.x == 0) {
        res_data.d[gl_WorkGroupID.x].x = valf.x;
        res_data.d[gl_WorkGroupID.x].y = valu;
        res_data.d[gl_WorkGroupID.x].z = valf.y;
    }
    if (idx == 0) {
        cnt.d += 1;
    }
    if (idx == 0) {
        chain_stats.d[MODE].total_luminance += valf.x;
        chain_stats.d[MODE].lum_samples += valu;
        chain_stats.d[MODE].total_samples += valf.y;
    }
}