#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "ddgi_commons.h"
#include "ddgi_commons.glsl"

#define WG_SIZE 32
layout(local_size_x = WG_SIZE, local_size_y = WG_SIZE, local_size_z = 1) in;

layout(binding = 0) uniform _SceneUBO { SceneUBO ubo; };
layout(binding = 1) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(binding = 2, rgba16f) uniform image2D irr_output_img;

layout(binding = 3) uniform sampler2D irr_img;
layout(binding = 4) uniform sampler2D depth_img;

layout(binding = 5) uniform _DDGIUniforms { DDGIUniforms ddgi_uniforms; };
layout(binding = 6, rgba32f) uniform image2D image;

layout(push_constant) uniform _PushConstantRay { PCDDGI pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer GBuffer { GBufferData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer DirLight { vec3 d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ProbeOffset { vec4 d[]; };
ProbeOffset probe_offsets = ProbeOffset(scene_desc.probe_offsets_addr);
DirLight direct_lighting = DirLight(scene_desc.direct_lighting_addr);
GBuffer gbuffer = GBuffer(scene_desc.g_buffer_addr);

#include "ddgi_irradiance.glsl"



void main() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	if (coords.x >= pc.size_x || coords.y >= pc.size_y) {
		return;
	}
	const vec2 pixel_center = vec2(coords) + vec2(0.5);
	const int linear_idx = int(gl_GlobalInvocationID.x * pc.size_y + gl_GlobalInvocationID.y);
	vec3 p = gbuffer.d[linear_idx].pos;
	vec3 n = gbuffer.d[linear_idx].normal;
	uint idx = pc.size_y * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y;
	vec3 col = pc.direct_lighting == 1 ? direct_lighting.d[idx] : vec3(0);
	if (dot(n, n) == 0) {
		imageStore(image, coords, vec4(col, 1.f));
		return;
	}
	vec3 wo = normalize((ubo.inv_view * vec4(0, 0, 0, 1)).xyz - p);
	vec3 irradiance = sample_irradiance(p, n, wo);
	col += gbuffer.d[idx].albedo / PI * irradiance;
	imageStore(image, coords, vec4(col, 1.f));
	imageStore(irr_output_img, coords, vec4(irradiance, 1.0f));
}