#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "ddgi_commons.h"
#include "../../commons.glsl"
#include "ddgi_utils.glsl"
layout(location = 0) rayPayloadEXT DDGIVisualizationHitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(push_constant) uniform _PushConstantRay { PCDDGI pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer GBuffer { GBufferData d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ProbeOffset { vec4 d[]; };
const uint flags = gl_RayFlagsOpaqueEXT;
GBuffer gbuffer = GBuffer(scene_desc.g_buffer_addr);
ProbeOffset probe_offsets = ProbeOffset(scene_desc.probe_offsets_addr);
const float tmin = 0.001;
const float tmax = 10000.0;
void main() {
	const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 in_uv = (pixel) / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = in_uv * 2.0 - 1.0;
	vec4 origin = ubo.view_pos;
	vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
	vec3 direction = vec3(sample_camera(d));
	traceRayEXT(tlas, flags, 0x2, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);

	if(payload.n_s != vec3(0)) {

		vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).rgb;
		vec3 new_col = mix(old_col, abs(payload.n_s), 0.1);
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(new_col, 1.0));
	}
}