#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "ddgi_commons.h"
#include "../../utils.glsl"

#define WG_SIZE 32
layout(local_size_x = WG_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0, rgba16f) uniform image2D output_irr;
layout(binding = 1, rg16f) uniform image2D output_vis;
layout(binding = 2) uniform _DDGIUniforms { DDGIUniforms ddgi_uniforms; };

// https://jcgt.org/published/0010/02/01/paper-lowres.pdf

// WG 0 -> 4 corners, (4 vis + 4  irr) probes ( = 32 threads)

// WG 1-4 -> 4 x 8 irr edges, 4 irr probes ( = 128 threads)

// WG 5-12 -> 4 x 16 vis edges, 4 vis probes ( = 256 threads)

// -- 13 WGs process 4 probes
// xy -> irr, zw- > vis

// Corner:
// A (1,1) -> (9,9)
// B (8,1) -> (0,9)
// C (1, 8) -> (9, 0)
// D (8, 8) -> (0, 0)

// Formula (+ 8) % 16
// Inverse: (+8 ) % 16

// Rows:

// A-> (1,1) -> (8, 0)
// B  (8,1) -> (1,0)
// k -> (7,1) -> (2,0)
// L -> (6,1) -> (3,0)

// D-> (8,8) -> (1, 9)

// Formula: (9 - x, y + (tid.y == 0 ? (-1 : 1)))
// Inverse: (9 - x, y + (tid.y == 0 ? (1 : -1)))

// Columns:

// B-> (8,1) -> (9, 8)
// D -> (8,8) -> (9, 1)
// C -> (1, 8) -> (0, 1)

// Formula : (x + (tid.x == 0 ? -1 : 1), 9 - y)
// Inverse: (x + (tid.x == 0 ? 1 : -1), 9 - y)

ivec2 mod_helper(const ivec2 v) { return ivec2((v.x & 1) == 1 ? v.x : 0, (v.y & 1) == 1 ? v.y : 0); }

#define VIS_WITH_BORDER 18
#define IRR_WITH_BORDER 10
void main() {
	int tid = int(gl_LocalInvocationID.x);
	int wid = int(gl_WorkGroupID.x % 13);

	const int gridxy = ddgi_uniforms.probe_counts.x * ddgi_uniforms.probe_counts.y;
	const int probe_batch_id = 4 * (int(gl_WorkGroupID.x) / 13);
	if (gl_WorkGroupID.x >= (gl_NumWorkGroups.x - 13)) {
		int grid_size = gridxy * ddgi_uniforms.probe_counts.z;
		int probes_to_process = 4 - (4 * (int(gl_NumWorkGroups.x) / 13) - grid_size);
		const bool out_of_bounds_corner = wid == 0 && ((tid % 16) >> 2) >= probes_to_process;
		const bool out_of_bounds_irr = wid < 5 && (wid - 1) >= probes_to_process;
		const bool out_of_bounds_vis = (wid - 5) >> 1 >= probes_to_process;
		if (out_of_bounds_corner || out_of_bounds_irr || out_of_bounds_vis) {
			return;
		}
	}

	if (wid == 0) {
		// Load 4 irr + vis probes (8 probes)
		const int probe_idx = (tid % 16) >> 2;
		const int global_probe_idx = probe_batch_id + probe_idx;
		const ivec2 global_offset = ivec2(global_probe_idx % gridxy, global_probe_idx / gridxy);
		const int corner_idx = tid & 3;
		if (tid >= 16) {
			const ivec2 src = ivec2(((corner_idx & 1) == 0) ? 1 : 8, (((corner_idx >> 1) & 1) == 0) ? 1 : 8);
			// Irr probes
			const ivec2 offset = ivec2(IRR_WITH_BORDER) * global_offset;
			imageStore(output_irr, offset + mod_helper(src.xy + 8), imageLoad(output_irr, offset + src.xy));
			// if(probe_idx == 0) {
			//     LOG2("Corner Irr: Src: %v2i, Dst: %v2i\n", src.xy,  mod_helper(src.xy + 8));
			// }
		} else {
			const ivec2 src = ivec2(((corner_idx & 1) == 0) ? 1 : 16, (((corner_idx >> 1) & 1) == 0) ? 1 : 16);
			// Vis probes
			const ivec2 offset = ivec2(VIS_WITH_BORDER) * global_offset;
			// if(probe_idx == 0) {
			//     LOG2("Corner Depth: Src: %v2i, Dst: %v2i\n", src.xy,  mod_helper(src.xy + 8));
			// }

			imageStore(output_vis, offset + mod_helper(src.xy + 16), imageLoad(output_vis, offset + src.xy));
		}
	} else if (wid < 5) {
		// 4 Irradiance probes
		const int edge_pair_idx = tid >> 3;
		const int probe_idx = wid - 1;
		const int global_probe_idx = probe_batch_id + probe_idx;
		const ivec2 global_offset = ivec2(global_probe_idx % gridxy, global_probe_idx / gridxy);
		const ivec2 offset = ivec2(IRR_WITH_BORDER) * global_offset;

		ivec4 src_dst;
		const int tl = tid & 7;
		const bool is_odd_edge = (edge_pair_idx & 1) == 1;
		const int odd_edge_x = is_odd_edge ? 8 : 1;
		const int odd_edge_y = is_odd_edge ? 9 : 0;
		if (edge_pair_idx < 2) {
			// Top - bottom
			src_dst = ivec4(1 + tl, odd_edge_x, 8 - tl, odd_edge_y);
		} else {
			// Left - right
			src_dst = ivec4(odd_edge_x, 1 + tl, odd_edge_y, 8 - tl);
		}

		// if(probe_idx == 0) {
		//     LOG2("Irr: Src: %v2i, Dst: %v2i\n", src_dst.xy, src_dst.zw);
		// }

		imageStore(output_irr, offset + src_dst.zw, imageLoad(output_irr, offset + src_dst.xy));
	} else {
		// 4 Depth probes (2 WG per probe)
		const int probe_idx = (wid - 5) >> 1;
		const int edge_pairs = wid & 1;	 //  0 -> top-bottom : 1 -> left-right
		const bool odd = tid < 16;
		const int global_probe_idx = probe_batch_id + probe_idx;
		const ivec2 global_offset = ivec2(global_probe_idx % gridxy, global_probe_idx / gridxy);
		const ivec2 offset = ivec2(VIS_WITH_BORDER) * global_offset;

		ivec4 src_dst;
		const int tl = tid & 15;
		const int odd_edge_x = odd ? 16 : 1;
		const int odd_edge_y = odd ? 17 : 0;
		if (edge_pairs == 0) {
			// Top - bottom
			src_dst = ivec4(1 + tl, odd_edge_x, 16 - tl, odd_edge_y);
		} else {
			// Left - right
			src_dst = ivec4(odd_edge_x, 1 + tl, odd_edge_y, 16 - tl);
		}

		// if (probe_idx == 0) {
		// 	LOG2("Depth: Src: %v2i, Dst: %v2i\n", src_dst.xy, src_dst.zw);
		// }
		imageStore(output_vis, offset + src_dst.zw, imageLoad(output_vis, offset + src_dst.xy));
	}
}