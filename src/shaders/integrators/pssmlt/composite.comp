#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "pssmlt_commons.h"
#include "../../utils.glsl"
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ColorStorages { vec3 d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer MLTColor { vec3 d[]; };
layout(binding = 0, rgba32f) uniform image2D image;
layout(binding = 1) buffer SceneDesc_ { SceneDesc scene_desc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer ChainStats { ChainData d[]; };
layout(push_constant) uniform _PushConstantRay { PCMLT pc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer CDFSum { float d; };
ChainStats chain_stats = ChainStats(scene_desc.chain_stats_addr);
MLTColor mlt_col = MLTColor(scene_desc.mlt_col_addr);
CDFSum cdf_sum = CDFSum(scene_desc.cdf_sum_addr);
void main() {
    ivec2 coords = ivec2(gl_GlobalInvocationID.x / pc.size_y,
                         gl_GlobalInvocationID.x % pc.size_y);
    if(coords.x >= pc.size_x || coords.y >= pc.size_y) {
        return;
    }
    vec3 col = vec3(0);
    col += mlt_col.d[gl_GlobalInvocationID.x] * cdf_sum.d / pc.mutations_per_pixel;
    if(isnan(luminance(col))) {
        return;
    }
    mlt_col.d[gl_GlobalInvocationID.x] = vec3(0);
    if (pc.frame_num > 0) {
        float w = 1. / float(pc.frame_num + 1);

        vec3 old_col = imageLoad(image, ivec2(coords)).xyz;
        imageStore(image, ivec2(coords), vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, ivec2(coords), vec4(col, 1.f));
    }
}