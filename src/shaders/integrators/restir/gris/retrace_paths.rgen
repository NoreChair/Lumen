#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#define RECONNECTION
#define SCENE_TEX_IDX 5
#include "gris_commons.glsl"
GrisReservoir reservoirs = GrisReservoir(scene_desc.gris_reservoir_addr);
GrisGBuffer g_buffers = GrisGBuffer(scene_desc.gris_gbuffer_addr);
GrisDirectLighting direct_lighting_buffer = GrisDirectLighting(scene_desc.gris_direct_lighting_addr);
layout(binding = 4, std430) buffer PathReconnections { ReconnectionData reconnection_data[]; };

ivec2 get_neighbor_offset(inout uvec4 seed) {
	const float randa = rand(seed) * 2 * PI;
	const float randr = sqrt(rand(seed)) * pc_ray.spatial_radius;
	return ivec2(floor(cos(randa) * randr), floor(sin(randa) * randr));
}

void main() {
	GBuffer gbuffer = g_buffers.d[pixel_idx];
	if (!gbuffer_data_valid(gbuffer)) {
		return;
	}
	const Reservoir canonical_reservoir = reservoirs.d[pixel_idx];
	uint num_spatial_samples = pc_ray.enable_spatial_reuse == 1 ? pc_ray.num_spatial_samples : 0;
	HitData unpacked_gbuffer =
		get_hitdata(gbuffer.barycentrics, gbuffer.primitive_instance_id.y, gbuffer.primitive_instance_id.x);
	for (uint i = 0; i < num_spatial_samples; i++) {
		ivec2 rand_offset = get_neighbor_offset(seed);
		const ivec2 coords = ivec2(gl_LaunchIDEXT.xy) + rand_offset;
		const uint neighbor_pixel_idx = coords.x * pc_ray.size_y + coords.y;
		if (any(lessThan(coords, ivec2(0))) || any(greaterThanEqual(coords, gl_LaunchSizeEXT.xy))) {
			continue;
		}
		ReconnectionData data;
		data.reservoir_contribution = vec3(0);
		data.jacobian = 0;
		GBuffer neighbor_gbuffer = g_buffers.d[neighbor_pixel_idx];
		if (!gbuffer_data_valid(neighbor_gbuffer)) {
			continue;
		}
		const Reservoir neighbor_reservoir = reservoirs.d[neighbor_pixel_idx];
		uvec4 reservoir_seed = init_rng(coords, gl_LaunchSizeEXT.xy, pc_ray.total_frame_num ^ pc_ray.random_num,
										neighbor_reservoir.data.init_seed);
		bool neighbor_in_canonical = retrace_paths(unpacked_gbuffer, neighbor_reservoir.data, gl_LaunchIDEXT.xy,
												   uvec2(coords), data.jacobian, data.reservoir_contribution);
		reconnection_data[num_spatial_samples * pixel_idx + i] = data;
	}
}