#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PCReSTIRPT pc_ray; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer GrisReservoir { ReSTIRPTReservoir d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer GrisGBuffer { ReSTIRPTGBuffer d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer GrisDirectLighting { vec3 d[]; };
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.total_frame_num ^ pc_ray.random_num);
GrisReservoir reservoirs = GrisReservoir(scene_desc.gris_reservoir_addr);
GrisGBuffer g_buffers = GrisGBuffer(scene_desc.gris_gbuffer_addr);
GrisDirectLighting direct_lighting_buffer = GrisDirectLighting(scene_desc.gris_direct_lighting_addr);
#include "../../pt_commons.glsl"

void init_reservoir(out ReSTIRPTReservoir r) {
	r.M = 0;
	r.W = 0.0;
	r.w_sum = 0.0;
}
void init_gris_data(out GrisData data) {
	data.rc_mat_id = -1;
	data.rc_postfix_L = vec3(0);
}

void update_reservoir(inout ReSTIRPTReservoir r_new, const GrisData data, float w_i) {
	r_new.w_sum += w_i;
	r_new.M++;
	if (rand(seed) < w_i / r_new.w_sum) {
		r_new.gris_data = data;
	}
}

void init_gbuffer(out ReSTIRPTGBuffer gbuffer) { gbuffer.material_idx = -1; }

bool is_rough(in Material mat) {
	// Only check if it's diffuse for now
	return (mat.bsdf_type & BSDF_DIFFUSE) != 0;
}

vec3 uniform_sample_light_gris(inout uvec4 seed, const Material mat, vec3 pos, const bool side, const vec3 n_s,
							   const vec3 wo, const bool is_specular, out bool visible) {
	vec3 res = vec3(0);
	// Sample light
	vec3 wi;
	float wi_len;
	float pdf_light_w;
	float pdf_light_a;
	LightRecord record;
	float cos_from_light;
	const vec3 Le =
		sample_light_Li(seed, pos, pc_ray.num_lights, pdf_light_w, wi, wi_len, pdf_light_a, cos_from_light, record);
	const vec3 p = offset_ray2(pos, n_s);
	float bsdf_pdf;
	float cos_x = dot(n_s, wi);
	const uint props = is_specular ? BSDF_ALL : BSDF_ALL & ~BSDF_SPECULAR;
	vec3 f = eval_bsdf(n_s, wo, mat, 1, side, wi, bsdf_pdf, cos_x);
	float pdf_light;
	any_hit_payload.hit = 1;
	traceRayEXT(tlas, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT, 0xFF, 1, 0, 1, p, 0, wi,
				wi_len - EPS, 1);
	visible = any_hit_payload.hit == 0;
	if (visible && pdf_light_w > 0) {
		const float mis_weight = is_light_delta(record.flags) ? 1 : 1 / (1 + bsdf_pdf / pdf_light_w);
		res += mis_weight * f * abs(cos_x) * Le / pdf_light_w;
	}
	if (get_light_type(record.flags) == LIGHT_AREA) {
		// Sample BSDF
		f = sample_bsdf(n_s, wo, mat, 1, side, wi, bsdf_pdf, cos_x, seed);
		if (bsdf_pdf != 0) {
			traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, p, tmin, wi, tmax, 0);
			if (payload.material_idx == record.material_idx && payload.triangle_idx == record.triangle_idx) {
				const float wi_len = length(payload.pos - pos);
				const float g = abs(dot(payload.n_s, -wi)) / (wi_len * wi_len);
				const float mis_weight = 1. / (1 + pdf_light_a / (g * bsdf_pdf));
				res += f * mis_weight * abs(cos_x) * Le / bsdf_pdf;
			}
		}
	}
	return res;
}

void main() {
	const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = in_uv * 2.0 - 1.0;
	vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
	vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
	vec3 direction = vec3(sample_camera(d));
	vec3 col = vec3(0);

	ReSTIRPTReservoir reservoir;
	GrisData data;
	ReSTIRPTGBuffer gbuffer;
	init_reservoir(reservoir);
	init_gris_data(data);
	init_gbuffer(gbuffer);

	bool specular = false;
	vec3 throughput = vec3(1);
	float source_pdf = 1.0;
	// Updated after a connectable vertex is found
	vec3 postfix_throughput = vec3(1);
	uint postfix_length = 0;

	bool connectable_vertex_found = false;
	data.init_seed = seed;
	bool curr_rough = false;
	bool prev_rough = false;
	vec3 prev_pos = origin.xyz;
	vec3 direct_lighting = vec3(0);
	for (int depth = 0;; depth++) {
		traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);
		const bool found_isect = payload.material_idx != -1;
		if (depth >= pc_ray.max_depth - 1) {
			break;
		}
		if (!found_isect) {
			vec3 atmosphere_L = shade_atmosphere(pc_ray.dir_light_idx, pc_ray.sky_col, origin.xyz, direction, tmax);
			if (depth == 0) {
				direct_lighting += throughput * atmosphere_L;
			} else {
				col += throughput * atmosphere_L;
			}
			if (connectable_vertex_found) {
				data.rc_postfix_L += postfix_throughput * atmosphere_L;
			}
			break;
		}
		const Material hit_mat = load_material(payload.material_idx, payload.uv);

		if (depth == 0) {
			// LOG_CLICKED_VAL("Pass 1: %v3f\n", payload.pos);
			gbuffer.pos = payload.pos;
			gbuffer.n_s = payload.n_s;
			gbuffer.n_g = payload.n_g;
			gbuffer.material_idx = payload.material_idx;
			gbuffer.uv = payload.uv;
		}

		if (connectable_vertex_found) {
			postfix_length++;
		}

		if (depth == 0) {
			direct_lighting += throughput * hit_mat.emissive_factor;

		} else if (specular) {
			col += throughput * hit_mat.emissive_factor;
		}

		const vec3 wo = -direction;
		vec3 n_s = payload.n_s;
		bool side = true;
		vec3 n_g = payload.n_g;
		if (dot(payload.n_g, wo) < 0.) n_g = -n_g;
		if (dot(n_g, payload.n_s) < 0) {
			n_s = -n_s;
			side = false;
		}
		origin.xyz = offset_ray(payload.pos, n_g);

		prev_rough = curr_rough;
		curr_rough = is_rough(hit_mat);
		bool connectable = !connectable_vertex_found &&
						   ((prev_rough && curr_rough) && length(payload.pos - prev_pos) > 0.01 * pc_ray.scene_extent);

		if (connectable) {
			data.rc_seed = seed;
			data.rc_pos = payload.pos;
			data.rc_uv = payload.uv;
			data.rc_ns = n_s;
			data.rc_mat_id = payload.material_idx;
			data.rc_side = uint(side);
		}

		bool nee_visible = false;
		vec3 nee_L = vec3(0);
		if ((hit_mat.bsdf_props & BSDF_SPECULAR) == 0) {
			const float light_pick_pdf = 1. / pc_ray.light_triangle_count;
			nee_L = uniform_sample_light_gris(seed, hit_mat, payload.pos, side, n_s, wo, specular, nee_visible) /
					light_pick_pdf;
			if (depth == 0) {
				direct_lighting += throughput * nee_L;
			} else {
				col += throughput * nee_L;
			}
			if (connectable_vertex_found) {
				data.rc_postfix_L += postfix_throughput * nee_L;
			}
		}

		// Sample direction & update throughput
		float pdf, cos_theta;
		const vec3 f = sample_bsdf(n_s, wo, hit_mat, 1 /*radiance=cam*/, side, direction, pdf, cos_theta, seed);
		if (pdf == 0) {
			break;
		}

		vec3 t = f * abs(cos_theta) / pdf;
		throughput *= t;

		if (connectable_vertex_found) {
			postfix_throughput *= t;
		} else {
			source_pdf *= pdf;
		}

		if (connectable) {
			data.rc_wi = direction;
			data.rc_nee_visible = uint(nee_visible);
			data.rc_nee_L = nee_L;
			connectable_vertex_found = true;
		}

		specular = (hit_mat.bsdf_props & BSDF_SPECULAR) != 0;

		float rr_scale = 1.0;
		if (hit_mat.bsdf_type == BSDF_GLASS) {
			rr_scale *= side ? 1. / hit_mat.ior : hit_mat.ior;
		}
		if (depth > RR_MIN_DEPTH) {
			float rr_prob = min(0.95f, luminance(throughput) * rr_scale);
			if (rr_prob == 0 || rr_prob < rand(seed))
				break;
			else
				throughput /= rr_prob;
		}

		prev_pos = payload.pos;
	}

	g_buffers.d[pixel_idx] = gbuffer;

	ReSTIRPTGBuffer gbuf2 = g_buffers.d[pixel_idx];
	float epos = dot(gbuffer.pos - gbuf2.pos, gbuffer.pos - gbuf2.pos);
	float euv = dot(gbuffer.uv - gbuf2.uv, gbuffer.uv - gbuf2.uv);
	float ens = dot(gbuffer.n_s - gbuf2.n_s, gbuffer.n_s - gbuf2.n_s);
	float eng = dot(gbuffer.n_g - gbuf2.n_g, gbuffer.n_g - gbuf2.n_g);
	if (epos > 1e-8 || euv > 1e-8 || ens > 1e-8 || eng > 1e-8 || gbuffer.material_idx != gbuf2.material_idx) {
		debugPrintfEXT("Assertion failed\n");
	}
	direct_lighting_buffer.d[pixel_idx] = direct_lighting;
	float target_pdf = luminance(col);
	if (isnan(target_pdf)) {
		return;
	}
	data.F = col;
	data.postfix_length = postfix_length;

	update_reservoir(reservoir, data, target_pdf / source_pdf);
	reservoir.W = target_pdf == 0 ? 0 : reservoir.w_sum / target_pdf;

	reservoirs.d[pixel_idx] = reservoir;
}