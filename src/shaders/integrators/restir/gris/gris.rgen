#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#define SCENE_TEX_IDX 6
#include "gris_commons.glsl"

GrisDirectLighting direct_lighting_buffer = GrisDirectLighting(scene_desc.gris_direct_lighting_addr);
PrefixContributions prefix_contributions = PrefixContributions(scene_desc.prefix_contributions_addr);

layout(binding = 4, std430) writeonly buffer OutReservoirs { Reservoir out_reservoirs[]; };
layout(binding = 5, std430) writeonly buffer OutGBuffer { GBuffer out_gbuffers[]; };

uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.general_seed);
uvec4 sampling_seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc.sampling_seed);

void main() {
	const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = in_uv * 2.0 - 1.0;
	vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
	vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
	vec3 direction = vec3(sample_camera(d));
	vec3 col = vec3(0);

	GBuffer gbuffer_out;
	init_gbuffer(gbuffer_out);

	bool last_vertex_specular = false;
	vec3 partial_throughput = vec3(1);
	float joint_pdf = 1.0;
	vec3 direct_lighting = vec3(0);
	float bsdf_pdf_val = 1;
	int depth;

	// GRIS variables
	bool connectable_vertex_found = false;
	bool prev_rough = false;
	bool curr_rough = false;
	Reservoir reservoir;
	GrisData reconnection_data;
	init_reservoir(reservoir);
	init_data(reconnection_data);
	init_data(reservoir.data);

	// Throughput after the reconnection vertex
	vec3 postfix_throughput = vec3(1);
	// Throughput up until and including the reconnection vertex
	vec3 rc_throughput = vec3(1);
	// Joint PDF just before the vertex that connects to the reconnection vertex
	float prefix_pdf_without_rc_pdf = 1;
	// PDF at the reconnection vertex to the next non-NEE vertex
	float rc_postfix_pdf = 1;
	// PDF at the vertex just before reconnection vertex
	float rc_pdf = 1;
	// Whether the normals at the reconnection vertex has been flipped
	bool rc_side = false;
	// Reconnection pdf times the geometry term at the reconnection vertex
	float rc_partial_jacobian = 1;

	int prefix_depth = 0;
	vec3 prefix_col = vec3(0);
	// Common reconnection data
	vec2 rc_barycentrics;
	uvec2 rc_primitive_instance_id;
	uint rc_coords = gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y;
	bool valid_reservoir = false;
	bool connectable = false;
	bool was_connectable = false;
	vec3 postfix_L = vec3(0);
	int postfix_depth = 0;
	for (depth = 0;; depth++) {
		traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin.xyz, tmin, direction, tmax, 0);
		const bool found_isect = payload.instance_idx != -1;

		float joint_pdf_times_bsdf_pdf = joint_pdf * bsdf_pdf_val;
		if (!found_isect) {
			vec3 atmosphere_L = shade_atmosphere(pc.dir_light_idx, pc.sky_col, origin.xyz, direction, tmax);
			vec3 contribution = partial_throughput * atmosphere_L / joint_pdf_times_bsdf_pdf;
			if (depth > 0) {
				col += contribution;
			} else {
				direct_lighting += contribution;
			}
			if (connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
				reconnection_data.rc_Li = postfix_throughput * atmosphere_L;
				reconnection_data.reservoir_contribution =
					rc_throughput * reconnection_data.rc_Li / (rc_pdf * rc_postfix_pdf * prefix_pdf_without_rc_pdf);
				reconnection_data.path_flags =
					pack_path_flags(prefix_depth, depth - prefix_depth + 1, RECONNECTION_TYPE_DEFAULT, false);
				bool merged = stream_reservoir(seed, reservoir, reconnection_data,
											   calc_target_pdf(reconnection_data.reservoir_contribution), 1.0);
				valid_reservoir = valid_reservoir || merged;
#else	// STREAMING_MODE != STREAMING_MODE_INDIVIDUAL
				postfix_L += postfix_throughput * atmosphere_L;
#endif	// STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
			}
			break;
		}

		float triangle_area = 0;
		HitData gbuffer = get_hitdata(payload.attribs, payload.instance_idx, payload.triangle_idx, triangle_area);
		const Material hit_mat = load_material(gbuffer.material_idx, gbuffer.uv);

		prev_rough = curr_rough;
		curr_rough = is_rough(hit_mat);
		// TODO: Check hit distance
		was_connectable = connectable;
		connectable = !connectable_vertex_found && ((prev_rough && curr_rough)) &&
					  length(gbuffer.pos - origin.xyz) > pc.min_vertex_distance_ratio * pc.scene_extent;

		const vec3 wo = -direction;
		vec3 n_s = gbuffer.n_s;
		vec3 n_g = gbuffer.n_g;

		bool side = face_forward(n_s, n_g, wo);

		if (depth == 0) {
			// Fill in GBuffer
			direct_lighting += partial_throughput * hit_mat.emissive_factor / joint_pdf_times_bsdf_pdf;
			gbuffer_out.barycentrics = payload.attribs;
			gbuffer_out.primitive_instance_id = uvec2(payload.triangle_idx, payload.instance_idx);
		} else {
			float mis_weight = 1.0;
			float g = abs(dot(-direction, n_s)) / (payload.dist * payload.dist);
			float pdf_light_w = 1.0 / (g * triangle_area);
			if (!last_vertex_specular) {
				mis_weight = 1.0 / (1 + pdf_light_w / bsdf_pdf_val);
			}
			vec3 partial_contrib = mis_weight * hit_mat.emissive_factor;
			if (depth == 1) {
				direct_lighting += partial_contrib * partial_throughput / joint_pdf_times_bsdf_pdf;
			} else {
				col += partial_contrib * partial_throughput / joint_pdf_times_bsdf_pdf;
			}
			if (connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
				// Stream in the emissive contribution
				reconnection_data.rc_Li = postfix_throughput;
				reconnection_data.rc_Li *= (was_connectable ? hit_mat.emissive_factor : partial_contrib);
				reconnection_data.reservoir_contribution =
					rc_throughput * reconnection_data.rc_Li / (rc_pdf * rc_postfix_pdf * prefix_pdf_without_rc_pdf);
				if (was_connectable) {
					reconnection_data.reservoir_contribution *= mis_weight;
					reconnection_data.pdf_light_w = pdf_light_w;
				}
				float prev = reservoir.w_sum;
				reconnection_data.path_flags = pack_path_flags(
					prefix_depth, depth - prefix_depth + 1,
					was_connectable ? RECONNECTION_TYPE_EMISSIVE_AFTER_RC : RECONNECTION_TYPE_DEFAULT, side);
				bool merged = stream_reservoir(seed, reservoir, reconnection_data,
											   calc_target_pdf(reconnection_data.reservoir_contribution), 1.0);
				valid_reservoir = valid_reservoir || merged;
#else	// STREAMING_MODE != STREAMING_MODE_INDIVIDUAL
				postfix_L += partial_contrib * postfix_throughput;
#endif	// STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
			}
		}

		if (connectable_vertex_found) {
			postfix_depth++;
		}

		if (depth >= pc.max_depth - 1) {
			break;
		}

		vec3 rc_Li = vec3(0);
		last_vertex_specular = (hit_mat.bsdf_props & BSDF_SPECULAR) != 0;
		// NEE
		if (!last_vertex_specular) {
			vec3 wi;
			uint rc_seed = seed.w;
			uvec4 debug_seed = seed;
			vec3 Li = do_nee(seed, gbuffer, hit_mat, side, n_s, wo, wi, true);
			vec3 partial_contrib = partial_throughput * Li;
			vec3 contribution = partial_contrib / joint_pdf_times_bsdf_pdf;

			// Stream the NEE path at the reconnection vertex
			if (connectable) {
				rc_barycentrics = payload.attribs;
				rc_primitive_instance_id = uvec2(payload.triangle_idx, payload.instance_idx);
				rc_pdf = bsdf_pdf_val;
				vec3 to_prev = origin.xyz - gbuffer.pos;
				rc_partial_jacobian *= abs(dot(n_s, wo)) / dot(to_prev, to_prev);

				reconnection_data.rc_barycentrics = rc_barycentrics;
				reconnection_data.rc_primitive_instance_id = rc_primitive_instance_id;
				reconnection_data.rc_coords = rc_coords;
				reconnection_data.rc_partial_jacobian = rc_partial_jacobian;

				reconnection_data.debug_seed = debug_seed;
				reconnection_data.rc_seed = rc_seed;
				reconnection_data.rc_wi = wi;
				reconnection_data.rc_Li = Li;
				reconnection_data.reservoir_contribution =
					contribution;  // partial_throughput * reconnection_data.rc_Li / (joint_pdf * rc_pdf);
				reconnection_data.path_flags = pack_path_flags(depth, 1, RECONNECTION_TYPE_NEE, side);
				bool merged = stream_reservoir(seed, reservoir, reconnection_data,
											   calc_target_pdf(reconnection_data.reservoir_contribution), 1.0);

				valid_reservoir = valid_reservoir || merged;
				prefix_col = col;
				if (!valid_reservoir) {
					ASSERT(reservoir.data.path_flags == 0);
				} else {
					ASSERT(reservoir.data.path_flags != 0);
				}
			} else if (connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
				reconnection_data.rc_Li = postfix_throughput * Li;
				reconnection_data.reservoir_contribution =
					contribution;  // rc_throughput * reconnection_data.rc_Li / (rc_pdf * rc_postfix_pdf *
								   // prefix_pdf_without_rc_pdf);
				reconnection_data.path_flags =
					pack_path_flags(prefix_depth, depth - prefix_depth + 1, RECONNECTION_TYPE_DEFAULT, side);
				bool merged = stream_reservoir(seed, reservoir, reconnection_data,
											   calc_target_pdf(reconnection_data.reservoir_contribution), 1.0);
				valid_reservoir = valid_reservoir || merged;
#else	// STREAMING_MODE != STREAMING_MODE_INDIVIDUAL
				postfix_L += Li * postfix_throughput;
#endif	// STREAMING_MODE == STREAMING_MODE_INDIVIDUAL
			}

			if (depth > 0) {
				col += contribution;
			} else {
				direct_lighting += contribution;
			}
		}
		origin.xyz = offset_ray(gbuffer.pos, n_g);
		// Record initial seed after direct light sampling
		if (depth == 0) {
			reconnection_data.init_seed = sampling_seed.w;
		}

		// Joint PDF includes up until the PDF that generates the reconnection vertex
		float joint_prev = joint_pdf;
		joint_pdf *= bsdf_pdf_val;
		// Sample direction & update partial_throughput
		float cos_theta;

		const vec3 f =
			sample_bsdf(n_s, wo, hit_mat, 1 /*radiance=cam*/, side, direction, bsdf_pdf_val, cos_theta, sampling_seed);
		if (bsdf_pdf_val == 0) {
			break;
		}
		vec3 f_cos = f * abs(cos_theta);
		partial_throughput *= f_cos;
		if (connectable_vertex_found) {
			postfix_throughput *= f_cos / bsdf_pdf_val;
		}

		if (connectable) {
			connectable_vertex_found = true;
			prefix_depth = depth;
			reconnection_data.rc_wi = direction;
			// Seed is not relevant here
			reconnection_data.rc_seed = -1;
			// Partially fill in the contribution data
			reconnection_data.reservoir_contribution = partial_throughput;
			reconnection_data.rc_partial_jacobian *= bsdf_pdf_val;
			reconnection_data.debug_seed = uvec4(-1);

			rc_postfix_pdf = bsdf_pdf_val;
			prefix_pdf_without_rc_pdf = joint_prev;
			rc_throughput = partial_throughput;
			rc_side = side;
		}

		rc_partial_jacobian *= bsdf_pdf_val;
		if (pc.enable_rr == 1) {
			float rr_scale = 1.0;
			if (hit_mat.bsdf_type == BSDF_GLASS) {
				rr_scale *= side ? 1. / hit_mat.ior : hit_mat.ior;
			}
			if (depth > RR_MIN_DEPTH) {
				float rr_prob = min(0.95f, luminance(partial_throughput / joint_pdf) * rr_scale);
				if (rr_prob == 0 || rr_prob < rand(seed))
					break;
				else
					partial_throughput /= rr_prob;
			}
		}
	}

	if (isnan(luminance(col))) {
		return;
	}
	if (pc.enable_gris == 1 && connectable_vertex_found) {
#if STREAMING_MODE == STREAMING_MODE_SPLIT
		reconnection_data.rc_Li = postfix_L;
		reconnection_data.reservoir_contribution =
			reconnection_data.reservoir_contribution * postfix_L / (rc_pdf * rc_postfix_pdf);
		reconnection_data.path_flags = pack_path_flags(prefix_depth, postfix_depth, RECONNECTION_TYPE_DEFAULT, rc_side);
		bool merged = stream_reservoir(seed, reservoir, reconnection_data,
									   calc_target_pdf(reconnection_data.reservoir_contribution),
									   1.0 / prefix_pdf_without_rc_pdf);
		valid_reservoir = valid_reservoir || merged;
#endif	// STREAMING_MODE == STREAMING_MODE_SPLIT
		if (valid_reservoir) {
			uint rc_type;
			uint rc_prefix_length;
			uint rc_postfix_length;
			bool side;
			unpack_path_flags(reservoir.data.path_flags, rc_type, rc_prefix_length, rc_postfix_length, side);
			ASSERT(reservoir.data.path_flags != 0);
			ASSERT(rc_type != RECONNECTION_TYPE_INVALID);
			ASSERT(reservoir_data_valid(reservoir.data));
		}
	}
	if (pc.direct_lighting == 1) {
		col += direct_lighting;
	}

	if (pc.enable_gris == 1) {
		ASSERT(reservoir.w_sum >= reservoir.target_pdf);
		// The samples are additive, therefore set M to 1
		reservoir.M = 1;
		calc_reservoir_W(reservoir);
		if (!connectable_vertex_found) {
			prefix_col = col;
		}
		prefix_contributions.d[pixel_idx] = prefix_col;
#ifdef CANONICAL_ONLY
		col = prefix_col + reservoir.data.reservoir_contribution * reservoir.W;
		if (pc.direct_lighting == 1) {
			col += direct_lighting;
		}
		if (pc.frame_num > 0) {
			float w = 1. / float(pc.frame_num + 1);
			vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
			imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_col, col, w), 1.f));
		} else {
			imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
		}
		return;
#endif	// CANONICAL_ONLY
	}

	if (pc.enable_gris == 0) {
		if (pc.frame_num > 0) {
			float w = 1. / float(pc.frame_num + 1);
			vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
			imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_col, col, w), 1.f));
		} else {
			imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
		}
	} else {
		if (pc.direct_lighting == 1) {
			direct_lighting_buffer.d[pixel_idx] = direct_lighting;
		}
		if (!valid_reservoir) {
			ASSERT(!reservoir_data_valid(reservoir.data));
			ASSERT(reservoir.data.path_flags == 0);
		}

		out_reservoirs[pixel_idx] = reservoir;
		out_gbuffers[pixel_idx] = gbuffer_out;
	}
}