#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "../commons.h"
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) readonly buffer RTUtilsDesc_ { RTUtilsDesc post_desc; };
layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Img { vec4 d[]; };
layout(buffer_reference, scalar, buffer_reference_align = 4) readonly buffer Residual { float d[]; };
layout(push_constant) uniform PC { RTUtilsPC pc; };
Img gt_img = Img(post_desc.gt_img_addr);
Img out_img = Img(post_desc.out_img_addr);
Residual res_data = Residual(post_desc.residual_addr);

shared float data[32];
void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= pc.size) {
        return;
    }
    vec3 diff = vec3(gt_img.d[idx] - out_img.d[idx]);
    float val = dot(diff, diff);

    val = subgroupAdd(val);
    if (gl_SubgroupInvocationID == 0) {
        data[gl_SubgroupID] = val;
    }
    barrier();
    if (gl_SubgroupID == 0) {
        val = data[gl_SubgroupInvocationID];
        subgroupBarrier();
        val = subgroupMin(val);
    }
    if (gl_LocalInvocationID.x == 0) {
        res_data.d[gl_WorkGroupID.x] = val;
    }
}